<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
  <service verb="create" noun="LoopSystemMessageRemote" authenticate="true">
    <description>
      Creates a new SystemMessage entry and associates it with the currently logged-in user.
    </description>
    <in-parameters>
      <parameter name="privateKey" required="true"/>
      <parameter name="sendSharedSecret" required="true"/>
    </in-parameters>
    <out-parameters>
      <parameter name="systemMessageRemoteId"/>
    </out-parameters>
    <actions>

      <!-- Get the currently logged-in userId -->
      <set field="userId" from="ec.user.userId"/>
      <if condition="userId == null">
        <return error="true" message="No logged-in user found."/>
      </if>

      <!-- Retrieve partyId from UserAccount using userId -->
      <entity-find entity-name="moqui.security.UserAccount" list="userAccountList">
        <econdition field-name="userId" value="${userId}"/>
      </entity-find>

      <!-- If no user is found, return an error -->
      <if condition="userAccountList.size() == 0">
        <return error="true" message="No UserAccount found for the logged-in user (userId: ${userId})."/>
      </if>

      <!-- Retrieve the partyId -->
      <set field="partyId" from="userAccountList[0].partyId"/>
      <if condition="partyId == null">
        <return error="true" message="No Party ID associated with the logged-in user (userId: ${userId})."/>
      </if>

      <!-- Create SystemMessageRemote entry -->
      <set field="systemMessageTypeId" from="'LoopWebhook'"/>
      <service-call name="create#SystemMessageRemote"
                    in-map="[privateKey:privateKey,
                             sendSharedSecret:sendSharedSecret,
                             systemMessageTypeId:systemMessageTypeId]"
                    out-map="systemMessageOut"/>
      <set field="systemMessageRemoteId" from="systemMessageOut.systemMessageRemoteId"/>
      <if condition="systemMessageRemoteId == null">
        <return error="true" message="Failed to create SystemMessageRemote. No valid ID returned."/>
      </if>

      <!-- Check for existing entry in PartySystemMessageRemote -->
      <entity-find entity-name="PartySystemMessageRemote" list="existingRecords">
        <econdition field-name="partyId" value="${partyId}"/>
        <econdition field-name="systemMessageRemoteId" value="${systemMessageRemoteId}"/>
      </entity-find>

      <if condition="existingRecords.size() > 0">
        <return error="true" message="Entry already exists for partyId: ${partyId} and systemMessageRemoteId: ${systemMessageRemoteId}."/>
      </if>

      <!-- Associate SystemMessageRemote with PartySystemMessageRemote -->
      <set field="assocTypeId" from="'LoopReturnsCreate'"/>
      <set field="fromDate" from="ec.user.nowTimestamp"/>
      <service-call name="create#PartySystemMessageRemote"
                    in-map="[
                      partyId:partyId,
                      systemMessageRemoteId:systemMessageRemoteId,
                      fromDate:fromDate,
                      assocTypeId:assocTypeId
                    ]"/>

       Step 5: Create Entry SystemMessageTypeParameter with SystemMessageRemote
<!--      <entity-find entity-name="SystemMessageType" list="systemMessageTypeList">-->
<!--        <econdition field-name="parentTypeId" value="${systemMessageTypeId}"/>-->
<!--      </entity-find>-->

      <!-- Step 6: Loop through retrieved systemMessageType records and insert entries in SystemMessageTypeParameter -->
<!--      <iterate list="systemMessageTypeList" entry="systemMessageType">-->

<!--        <service-call name="create#SystemMessageTypeParameter"-->
<!--                      in-map="[-->
<!--                      systemMessageTypeId:systemMessageTypeId,-->
<!--                      systemMessageRemoteId:systemMessageOut.systemMessageRemoteId-->
<!--                    ]"/>-->
<!--          <set field="systemMessageTypeId" from="systemMessageType.systemMessageTypeId"/>-->
<!--          <set field="systemMessageRemoteId" from="systemMessageOut.systemMessageRemoteId"/>-->

<!--      </iterate>-->

      <!-- Final Success Message -->
      <entity-find entity-name="SystemMessageRemote" list="remoteList">
        <econdition field-name="systemMessageTypeId" value="LoopWebhook"/>
        <order-by field-name="systemMessageRemoteId"/>
      </entity-find>

      <!-- Get first remoteId -->
      <if condition="remoteList">
        <set from="remoteList[0].systemMessageRemoteId" field="loopRemoteId"/>
      </if>

      <!-- 2. Get all SystemMessageType where parentTypeId = 'LoopWebhook' -->
      <entity-find entity-name="SystemMessageType" list="typeList">
        <econdition field-name="parentTypeId" value="LoopWebhook"/>
      </entity-find>

      <!-- 3. Loop over each systemMessageTypeId and update SystemMessageTypeParameter -->
      <iterate list="typeList" entry="typeEntry">
        <set from="typeEntry.systemMessageTypeId" field="currentTypeId"/>

        <!-- Check if parameter exists -->
        <entity-find entity-name="SystemMessageTypeParameter" list="paramList">
          <econdition field-name="systemMessageTypeId" from="currentTypeId"/>
        </entity-find>

        <if condition="paramList">
          <iterate list="paramList" entry="paramEntry">
            <set from="loopRemoteId" field="paramEntry.systemMessageRemoteId"/>
            <entity-update value-field="paramEntry"/>
          </iterate>
        </if>
      </iterate>
      <set field="statusMessage" from="'LOOP Account successfully created and linked to the logged-in user.'"/>
    </actions>
  </service>
</services>